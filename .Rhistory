props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
ggplot(props, aes(x=rownames, y=rowprops)) + geom_bar(stat="identity") + coord_flip()
df$mdicut<-cut(df$mdi, breaks=b)
tbl <- table(df$mdicut, df$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
ggplot(props, aes(x=rownames, y=rowprops)) + geom_bar(stat="identity") + coord_flip()
b=100
df$mdicut<-cut(df$mdi, breaks=b)
tbl <- table(df$mdicut, df$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
ggplot(props, aes(x=rownames, y=rowprops)) + geom_bar(stat="identity") + coord_flip()
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se))
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se))
coord_flip()
install.packages("sciplot")
require(sciplot)
?se
props$se <- 1.96*(sd(props$rowprops, na.rm=T)/sqrt(length(props$rowprops)))
View(props)
props$se<-se(props$rowprops)
props$se <- 1.96*(sd(props$rowprops, na.rm=T)/sqrt(length(props$rowprops)))
props$se2<-se(props$rowprops)
View(props)
View(props)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se))
coord_flip()
b=100
df$mdicut<-cut(df$mdi, breaks=b)
tbl <- table(df$mdicut, df$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se))
coord_flip()
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar() +
coord_flip()
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se)) +
coord_flip()
b=100
df$mdicut<-cut(df$mdi, breaks=b)
tbl <- table(df$mdicut, df$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
props$se <- 1.96*(sd(props$rowprops, na.rm=T)/sqrt(length(props$rowprops)))
props$se2<-se(props$rowprops)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se)) +
coord_flip()
?se
props$se <- 1.96*(sd(props$rowprops, na.rm=F)/sqrt(length(props$rowprops)))
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se)) +
coord_flip()
View(props)
props<-subset(df, select=c("mdi", "onset"))
props<-pairs[complete.cases(props),]
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, df$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
props$se <- 1.96*(sd(props$rowprops, na.rm=T)/sqrt(length(props$rowprops)))
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se)) +
coord_flip()
library(MASS)                  # load the MASS package
?prop.test
prop.test(props$onset,props$mdi)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
prop.test(props$onset,props$mdi)
prop.test(props$onset,props$mdicut)
prop.test(props$mdicut,props$onset)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props<-props[complete.cases(props),]
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
prop.test(props$mdicut,props$onset)
prop.test(props$onset,props$mdicut)
table
tbl
props<-subset(df, select=c("mdi", "onset", "country"))
props<-props[complete.cases(props),]
tbl2(props$mdicut, length(props$country))
tbl2<-table(props$mdicut, length(props$country))
props<-subset(df, select=c("mdi", "onset", "country"))
props<-props[complete.cases(props),]
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
tbl2<-table(props$mdicut, length(props$country))
View(props)
tbl2<-table(props$mdicut, props$country)
tbl2
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
props$counter<-seq(1,length(props),1)
props$counter<-seq(1,length(props$mdi),1)
View(props)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
tbl2<-table(props$mdicut, unique(props$counter))
tbl2
tbl2<-table(props$mdicut, length(unique(props$counter)))
tbl2<-table(props$mdicut, length(props$counter))
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
props$counter<-seq(1,length(props$mdi),1)
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
tbl2<-table(props$mdicut, length(props$counter))
?seq
props$counter<-1
View(props)
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
props$counter<-1
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
tbl2<-table(props$mdicut, sum(props$counter))
View(props)
?sum
sum(props$counter)
View(props)
# and as proportion of all civil wars (column proportions)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
colpropsum<-sum(props$colprops)
props$se <- 1.96*(sd(props$rowprops, na.rm=T)/sqrt(length(props$rowprops)))
props$se2<-se(props$rowprops)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=rowprops-se, ymax=rowprops+se)) +
coord_flip()
?prop
?se
?std.err
require(plotrix)
install.packages("plotrix")
require(plotrix)
?std.err
?std
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
b=200
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
b=200
props$mdicut<-cut(props$mdi, breaks=b)
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=200
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
b=300
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
b=500
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=500
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(props, aes(x=rownames, y=colprops)) +
geom_bar(stat="identity") +
coord_flip()
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=100
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
b=200
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
props<-subset(df, select=c("mdi", "onset"))
props<-props[complete.cases(props),]
# Civil war onsets as proportion of mdi categories (row proportions)
# and as proportion of all civil wars (column proportions)
b=200
props$mdicut<-cut(props$mdi, breaks=b)
tbl <- table(props$mdicut, props$onset)
props1<-prop.table(tbl,1)[1:100,2]
props2<-prop.table(tbl,2)[1:100,2]
props<-as.data.frame(cbind(props1,props2))
names(props)<-c("rowprops", "colprops")
props$rownames<-as.factor(row.names(props))
props$rownames<-factor(props$rownames, levels=props$rownames, ordered=TRUE)
ggplot(props, aes(x=rownames, y=rowprops)) +
geom_bar(stat="identity") +
coord_flip()
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,145,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,145,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,300,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,330,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,145,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,145,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
theme_bw()
violinplot
?scale_manual
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,5)) +
scale_y_continuous(limits = c(0,320)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(limits = c(0,320), breaks=seq(0,320,5)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,10)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,10)) +
theme_bw()
violinplot
violinplot <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(limits = c(0,320), breaks=seq(0,320,10)) +
theme_bw()
violinplot
require(gridExtra)
install.packages("gridExtra")
require(gridExtra)
grid.arrange(violinplot1, violinplot2, violinplot3, ncol=1, nrow=2)
violinplot1 <- ggplot(subset(df), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,10)) +
theme_bw()
grid.arrange(violinplot1, violinplot2, violinplot3, ncol=1, nrow=2)
violinplot2 <- ggplot(subset(df, onset==0), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(breaks=seq(0,320,10)) +
theme_bw()
violinplot3 <- ggplot(subset(df, onset==1), aes(factor(onset), mdi)) +
geom_violin(fill = "grey80", colour = "#000000", scale="count") +
scale_y_continuous(limits = c(0,320), breaks=seq(0,320,10)) +
theme_bw()
grid.arrange(violinplot1, violinplot2, violinplot3, ncol=1, nrow=2)
?grid.arrange
grid.arrange(violinplot1, violinplot2, violinplot3)
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2)
?grid.arrange
?grid.layout
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = unit(rep_len(1, ncol), "null"),
heights = unit(rep_len(1, nrow), "null"))
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = unit(.5, ncol),
heights = unit(.5, nrow)))
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = unit(.5, ncol),
heights = unit(.5, nrow))
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = (.5, ncol),
heights = (.5, nrow))
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = .5,
heights = .5)
grid.arrange(violinplot1, violinplot2, violinplot3, nrow=2,
widths = .9,
heights = .5)
?multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(violingplot1, vp = vplayout(1, 1:2))  # key is to define vplayout
print(violinplot1, vp = vplayout(1, 1:2))  # key is to define vplayout
print(violinplot2, vp = vplayout(2, 1))
print(violinplot3, vp = vplayout(2, 2))
