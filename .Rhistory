cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res,
size=abs(res)))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #PSA14")
cent<-data.frame(bet=betweenness(rt_graph),eig=evcent(rt_graph)$vector)
res<-lm(eig~bet,data=cent)$residuals
cent<-transform(cent,res=res)
library(ggplot2)
p<-ggplot(cent,aes(x=bet,y=eig,
label=rownames(cent),colour=res))+
xlab("Betweenness Centrality")+ylab("Eigenvector Centrality")
p+geom_text()+opts(title="Key Actor Analysis for #PSA14")
library(rstan)
install.packages("rstan")
rstan
??rstan
require(rstan)
install.packages('inline')
install.packages('Rcpp')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
gc()
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/k_clusters.Rdata")
k<-200
kclusters<-kmeans(standarddtm, centers=k)
summary(kclusters)
kclusters<-kmeans(standarddtm, centers=k)
kclusters<-kmeans(standarddtm, centers=200)
k<-200
kclusters<-kmeans(kdata, centers=k)
cl<-kclusters
save(cl, file="~/Dropbox/gh_projects/uk_govt_web_archive/data/cluster_model.Rdata")
table(cl$cluster)
seed()
?set.seed
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/globalisation_corpus.Rdata")
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/cluster_model.Rdata")
table(cl$cluster)
meta(corpus[[1]], tag="Heading")
require(tm)
meta(corpus[[1]], tag="Heading")
lapply(corpus, function(x) meta(x, tag="Heading"))
headings<-lapply(corpus, function(x) meta(x, tag="Heading"))
headings<-unlist(headings)
head(headings)
headings<-as.factor(headings)
headings
summary(headings)
table(headings)
headings<-as.data.frame(table(headings))
View(headings)
require(pander)
?pander
kable(assocs)
require(knitr)
kable(assocs)
?kable
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
options(scipen=999)
logliks <- as.data.frame(as.matrix(lapply(lda.models, logLik)))
logliks$LogLikelihood<-as.numeric(logliks$V1)
logliks$K<-c(50, 100, 400)
ggplot(logliks, aes(x=K, y=LogLikelihood)) + geom_line() + theme_bw()
x1 = arima.sim(list(order=c(1,0,0), ar=.9), n=100)
x2 = arima.sim(list(order=c(1,0,0), ar=-.9), n=100)
par(mfrow=c(2,1))
plot(x1, main=(expression(AR(1)~~~phi==+.9)))      # ~ is a space and == is equal
plot(x2, main=(expression(AR(1)~~~phi==-.9)))
?arima.sim
M=1000
?rnorm
x = rnorm(M)
plot(cumsum(x), type='l')
walk<-cumsum(x)
plot(walk, type='l')
plot(walk, type='l')
plot(walk, type='l')
?cut
cut(walk, breaks=10)
breaks10<-cut(walk, breaks=10)
breaks100<-cut(walk, breaks=100)
plot(breaks10)
plot(breaks100)
M=1000
x = rnorm(M)
walk2<-cumsum(x)
lm(walk2 ~ breaks10 + breaks100)
model<-lm(walk2 ~ breaks10 + breaks100)
summary(model)
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
options(scipen=999)
logliks <- as.data.frame(as.matrix(lapply(lda.models, logLik)))
logliks$LogLikelihood<-as.numeric(logliks$V1)
logliks$K<-c(50, 100, 400)
ggplot(logliks, aes(x=K, y=LogLikelihood)) + geom_line() + theme_bw()
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
options(scipen=999)
logliks <- as.data.frame(as.matrix(lapply(lda.models, logLik)))
logliks$LogLikelihood<-as.numeric(logliks$V1)
logliks$K<-c(5, 50, 100, 400, 1000)
ggplot(logliks, aes(x=K, y=LogLikelihood)) + geom_line() + theme_bw()
logliks$K[min(diff(logliks$LogLikelihood)]
logliks$K[min(diff(logliks$LogLikelihood))]
View(logliks)
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/sampledtm.Rdata")
options(scipen=999)
logliks <- as.data.frame(as.matrix(lapply(lda.models, logLik)))
logliks$LogLikelihood<-as.numeric(logliks$V1)
logliks$K<-c(5, 50, 100, 400, 1000)
ggplot(logliks, aes(x=K, y=LogLikelihood)) + geom_line() + theme_bw()
perplexity <- as.data.frame(as.matrix(lapply(lda.models, perplexity)))
logliks$Perplexity<-as.numeric(perplexity$V1)
ggplot(logliks, aes(x=K, y=Perplexity)) + geom_line() + theme_bw()
ldamodel<-lda.models[[3]]
terms(ldamodel, 10)
?identifier
?meta
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/globalisation_corpus.Rdata")
meta(corpus)
meta(corpus[[1]])
corpus[, "identifier"]
names(corpus)
sampledtm[, "identifier"]
names(sampledtm)
sampledtm$v
names(sampledtm)
sampledtm$dimnames
names(sampledtm)
meta(corpus)
meta(corpus[[1]])
meta(corpus[[1]], tag=Heading)
meta(corpus[[1]], tag="Heading")
meta(corpus, tag="Heading")
require(tm)
require(slam)
require(topicmodels)
require(ggplot2)
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/lda_models.Rdata")
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/sampledtm.Rdata")
load("~/Dropbox/gh_projects/uk_govt_web_archive/data/globalisation_corpus.Rdata")
options(scipen=999)
perplexity <- as.data.frame(as.matrix(lapply(lda.models, perplexity)))
perplexity$Perplexity<-as.numeric(perplexity$V1)
perplexity$K<-c(5, 50, 100, 400, 1000)
ggplot(perplexity, aes(x=K, y=Perplexity)) + geom_line() + theme_bw()
ldamodel<-lda.models[[3]]
terms(ldamodel, 10)
terms<-terms(ldamodel, 10)
terms
terms[,1]
terms[1,]
install.packages("rticles")
install.packages("rticles")
devtools::install_github("rstudio/rticles")
install.packages("rstudio")
install.packages("devtools")
devtools::install_github("rstudio/rticles")
n <- 200
set.seed(101)
sd.value <- 1
X1 <- rnorm(n, 0, 1)
X2 <- rnorm(n, 0, 1)
Y <- rnorm(n, (5 + 3*X1 - 2*X2), sd.value)
simdata <- data.frame(X1, X2, Y)
summary(lm(Y ~ X1 + X2, data=simdata))
?binom
?rbinom
X3 <- rnorm(n, 0, 1)
Y <- rnorm(n, (0 + 2*X1 + 2*X2 + X3*X3), sd.value)
simdata <- data.frame(X1, X2, Y)
summary(lm(Y ~ X1 + X2 + X3, data=simdata))
summary(lm(Y ~ X1 + X2 + X3 + X3*X3, data=simdata))
simdata <- data.frame(X1, X2, X3, Y)
summary(lm(Y ~ X1 + X2 + X3 + X3*X3, data=simdata))
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3*X3, data=simdata))
summary(lm(Y ~ X1 + X2 + X3 + X3X3, data=simdata))
Y <- rnorm(n, (0 + 2*X1 + 2*X2 + 2X3*2X3), sd.value)
simdata <- data.frame(X1, X2, X3, Y)
x1 <- 11:30
x2 <- runif(20,5,95)
x3 <- rbinom(20,1,.5)
b0 <- 17
b1 <- 0.5
b2 <- 0.037
b3 <- -5.2
sigma <- 1.4
eps <- rnorm(x1,0,sigma)
y <- b0 + b1*x1  + b2*x2  + b3*x3 + eps
summary(lm(y~x1+x2+x3))
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
set.seed(666)
x1 = rnorm(1000)           # some continuous variables
x2 = rnorm(1000)
x1 = rnorm(1000)           # some continuous variables
x2 = rnorm(1000)
z = 1 + 2*x1 + 3*x2        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(1000,1,pr)      # bernoulli response variable
#now feed it to glm:
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
model<-glm( y~x1+x2,data=df,family="binomial")
summary(model)
x3 = rnorm(1000)
2*x3*x3
plot(2*x3*x3)
plot(2*x3*-2*x3)
x = seq(0,1,length=11)
y = sin(2*pi*x) + rnorm(11, sd=0.3)
plot(x,y)
x = seq(0,1,length=1000)
y = sin(2*pi*x) + rnorm(1000, sd=0.3)
plot(x,y)
y = sin(pi*x) + rnorm(1000, sd=0.3)
plot(x,y)
?sin
y = sin(x) + rnorm(1000, sd=0.3)
plot(x,y)
y = sin(2*x) + rnorm(1000, sd=0.3)
plot(x,y)
y = sin(2*x) + rnorm(1000, sd=0.3)
## plot it
y = sin(2*2*x) + rnorm(1000, sd=0.3)
plot(x,y)
?pi
y = sin(-2*2*x) + rnorm(1000, sd=0.3)
plot(x,y)
y = sin(4*4*x) + rnorm(1000, sd=0.3)
plot(x,y)
y = sin(2*2*x) + rnorm(1000, sd=0.3)
plot(x,y)
set.seed(666)
x = seq(0,1,length=1000)
y = sin(2*2*x) + rnorm(1000, sd=0.3)
plot(x,y)
lm1 = lm(y~x)
summary(lm1)
lm10 = lm(y~x
+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9)+I(x^10))
lm9 = lm(y~x
+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8)+I(x^9))
lm8 = lm(y~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8))
lm7 = lm(y~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7))
lm6 = lm(y~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6))
lm5 = lm(y~x+I(x^2)+I(x^3)+I(x^4)+I(x^5))
lm4 = lm(y~x+I(x^2)+I(x^3)+I(x^4))
lm3= lm(y~x+I(x^2)+I(x^3))
lm2 = lm(y~x+I(x^2))
?I
xplot=seq(0,1,length=200)
lines(xplot,predict(lm3,newdata=data.frame(x=xplot)), col="blue")
lines(xplot,predict(lm2,newdata=data.frame(x=xplot)), col="red")
lines(xplot,predict(lm5,newdata=data.frame(x=xplot)), col="green")
for(degree in 1:10){
fm = lm(y~poly(x,degree))
assign(paste("y",degree,sep="."),fm) # this isn't needed, but
handy
lines(xplot,predict(fm,data.frame(x=xplot)), col=degree)
}
for(degree in 1:10){
fm = lm(y~poly(x,degree))
assign(paste("y",degree,sep="."),fm) # this isn't needed, but handy
lines(xplot,predict(fm,data.frame(x=xplot)), col=degree)
}
lines(xplot,sin(2*pi*xplot),col="gray")
lines(xplot,sin(2*2*xplot),col="gray")
lines(xplot,sin(2*2*xplot),col="gray")
lines(xplot,sin(2*2*xplot),col="gray")
lms = list(lm1,lm2,lm3,lm4,lm5,lm6,lm7,lm8,lm9,lm10)
train = test = rep(0,10) # train = vector(length=10) also works
for(i in 1:10){train[i]=var(lms[i][[1]]$residuals)}
# now compute similarly scaled prediction error for test data
newy = sin(2*2*x)+rnorm(11,sd=.3) # note we used the same x's
for(j in 1:10){test[j] = (1/10)*sum((newy-predict(lms[j]
[[1]],newdata=data.frame(x)))^2)}
for(i in 1:10){train[i]=var(lms[i][[1]]$residuals)}
# now compute similarly scaled prediction error for test data
newy = sin(2*2*x)+rnorm(1000,sd=.3) # note we used the same x's
for(j in 1:10){test[j] = (1/10)*sum((newy-predict(lms[j]
[[1]],newdata=data.frame(x)))^2)}
plot(1:10,train, ylim=c(0,.5))
points(1:10,test,pch="X")cbind(train,test)
points(1:10,test,pch="X")
cbind(train,test)
sin(4*X3)
plot(sin(4*X3))
plot(sin(2*2*X3))
X3 <- sin(2*2*X2) + rnorm(n, 0, sd=1)
plot(X3)
X3 <- rnorm(n, 0, 1)
X1 <- rnorm(n, 0, 1)
X2 <- rnorm(n, 0, 1)
X3 <- rnorm(n, 0, 1)
n <- 1000
n <- 1000
set.seed(101)
sd.value <- 1
X1 <- rnorm(n, 0, 1)
X2 <- rnorm(n, 0, 1)
X3 <- rnorm(n, 0, 1)
Y <- rnorm(n, (0 + 2*X1 + 2*X2 + sin(2*2*X3)), sd.value)
simdata <- data.frame(X1, X2, X3, Y)
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3*X3, data=simdata))
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3*X3, data=simdata))
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
simdata <- data.frame(X1, X2, X3, Y)
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
Y <- rnorm(n, (0 + 2*X1 + 2*X2 + 2*X3 + sin(2*2*X3)), sd.value)
simdata <- data.frame(X1, X2, X3, Y)
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
Y <- rnorm(n, (0 + 2*X1 + 2*X2 + 2*X3 + 2*sin(2*2*X3)), sd.value)
simdata <- data.frame(X1, X2, X3, Y)
simdata$X3X3<-simdata$X3*simdata$X3
summary(lm(Y ~ X1 + X2 + X3 + X3 + X3X3, data=simdata))
setwd("~/Dropbox/gh_projects/media_civil_war")
require(foreign)
require(plm)
require(Zelig)
require(ggplot2)
require(reshape2)
# Read in the data from Warren 2014
df<-read.dta("data/Warren_IO_reg_data.dta")
# Make country variable a factor instead of character
df$country<-as.factor(df$country)
# Make new variables panel-style
pdf<-pdata.frame(df, index=c("cowcode", "year"))
pdf$lonset<-lag(pdf$onset)
pdf$lmdi<-lag(pdf$mdi)
pdf$d.mdi<-diff(pdf$mdi, differences=1)
pdf$ld.mdi<-diff(pdf$lmdi, differences=1)
pdf$lnews<-lag(pdf$newsli)
pdf$d.news<-diff(pdf$newsli, differences=1)
pdf$ld.news<-diff(pdf$lnews, differences=1)
pdf$lradio<-lag(pdf$radioli)
pdf$d.radio<-diff(pdf$radioli, differences=1)
pdf$ld.radio<-diff(pdf$lradio, differences=1)
pdf$ltv<-lag(pdf$tvli)
pdf$d.tv<-diff(pdf$tvli, differences=1)
pdf$ld.tv<-diff(pdf$ltv, differences=1)
df<-as.data.frame(pdf)
df<-subset(df, select=(1:length(df)))
units <- pdf[!is.na(pdf$mdi)]
units<-aggregate(units$mdi, by=list(units$country), FUN=length)
units<-units[order(units$x),]
units<-subset(pdf, country=="Uruguay" |
country=="U.S.A" |
country=="Switzerland" |
country=="Sweden" |
country=="Romania" |
country=="Norway" |
country=="Nicaragua" |
country=="Netherlands" |
country=="Mexico" |
country=="Luxembourg" |
country=="Ireland" |
country=="Hungary" |
country=="Honduras" |
country=="Haiti" |
country=="Gautemala" |
country=="France" |
country=="Finland" |
country=="El Salvador" |
country=="Dominican Republic" |
country=="Denmark" |
country=="Cuba" |
country=="Costa Rica" |
country=="China" |
country=="Canada" |
country=="Belgium" |
country=="Afghanistan")
purtest(units$mdi, lags="AIC", exo = "trend", test = "levinlin")
purtest(units$mdi, lags="AIC", exo = "trend", test = "ips")
cipstest(units$mdi, type="trend")
levinlin<-purtest(units$mdi, lags="AIC", exo = "trend", test = "levinlin")
names(levinlin)
levinlin$statistic
names(levinlin$statistic)
names(levinlin$statistic$p.value)
names(levinlin$statistic$statistic)
names(levinlin$statistic$alternative)
levinlin$statistic$p.value
levinlin$statistic$p.value$z.x1
print(levinlin$statistic$p.value)
print(levinlin$statistic$p.value[1])
levinlin.p<-levinlin$statistic$p.value
isp<-cipstest(units$mdi, type="trend")
isp$statistic$p.value
names(isp)
isp$p.value
isp.p<-isp$p.value
length(units)
View(units)
unitsn<-length(units)
unitcountry<-unique(units$country)
unitcountry<-unique(as.character(units$country))
unitcountry
View(units)
unitn<-length(unique(units$country))
unitn
paste(unitcountry, sep=",")
summary(levinlin)
levinlin
summary(ips)
ips<-cipstest(units$mdi, type="trend")
summary(ips)
ips
levinlin<-purtest(unit$mdi, lags="AIC", exo = "trend", test = "levinlin")
# subset with no missing values
unit <- pdf[!is.na(pdf$mdi)]
# obtain number of time periods per country
unit<-aggregate(unit$mdi, by=list(unit$country), FUN=length)
# order to identify countries with longest time-series
unit<-unit[order(unit$x),]
# subset to only countries with longest panels (55 years)
unit<-subset(pdf, country=="Uruguay" |
country=="U.S.A" |
country=="Switzerland" |
country=="Sweden" |
country=="Romania" |
country=="Norway" |
country=="Nicaragua" |
country=="Netherlands" |
country=="Mexico" |
country=="Luxembourg" |
country=="Ireland" |
country=="Hungary" |
country=="Honduras" |
country=="Haiti" |
country=="Gautemala" |
country=="France" |
country=="Finland" |
country=="El Salvador" |
country=="Dominican Republic" |
country=="Denmark" |
country=="Cuba" |
country=="Costa Rica" |
country=="China" |
country=="Canada" |
country=="Belgium" |
country=="Afghanistan")
# count number of countries
unitn<-length(unique(unit$country))
# make list of countries
unitcountry<-unique(as.character(unit$country))
# run levin-lin-chu test
levinlin<-purtest(unit$mdi, lags="AIC", exo = "trend", test = "levinlin")
# save p.value
levinlin.p<-levinlin$statistic$p.value
# run i-p-s test
ips<-cipstest(unit$mdi, type="trend")
# save p.value
ips.p<-ips$p.value
print(levinlin)
levinlin$statistic
ips$statistic
summary(ips$statistic)
print(ips$statistic)
print(levinlin$statistic
print(levinlin$statistic)
print(levinlin$statistic)
ips
print(ips)
names(ips)
summary(levinlin)
print(levinlin)
kable(levinlin)
require(knitr)
kable(levinlin)
as.data.frame(levinlin)
data.frame(levinlin)
data.frame(levinlin$statistic)
as.data.frame(levinlin$statistic)
names(levinlin)
summary(levinlin)
